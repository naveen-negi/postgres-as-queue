databaseChangeLog:
  - changeSet:
      id: '2-1'
      author: 'knav'
      changes:
        - sql:
            sql: |
              CREATE OR REPLACE FUNCTION notify_change() RETURNS TRIGGER AS $$
              BEGIN
                  IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
                      PERFORM pg_notify('jobs_notification', row_to_json(NEW)::text);
                  END IF;
                  RETURN NEW;
              END;
              $$ LANGUAGE plpgsql;
            splitStatements: false  # Ensuring this statement runs alone

  - changeSet:
      id: '2-2'
      author: 'knav'
      changes:
        - sql:
            sql: |
              DROP TRIGGER IF EXISTS after_insert_or_update_archive_jobs ON archive_jobs;
            splitStatements: true

  - changeSet:
      id: '2-3'
      author: 'knav'
      changes:
        - sql:
            sql: |
              CREATE TRIGGER after_insert_or_update_archive_jobs
              AFTER INSERT OR UPDATE ON archive_jobs 
              FOR EACH ROW EXECUTE FUNCTION notify_change();
            splitStatements: true
